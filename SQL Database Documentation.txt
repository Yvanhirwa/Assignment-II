SQL Database Documentation
Overview
This documentation provides an overview of the SQL operations performed to manage roles, users, groups, systems, events, actions, and their relationships in the database. It outlines the structure of the database schema, constraints, and sample queries.

Database Schema
1. Tables
1.1 Roles Table
Purpose: Stores roles that users can have.
Structure:
sql
Copy code
CREATE TABLE Roles (
    role_id INT PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    description CLOB
);
1.2 Users Table
Purpose: Stores user information.
Structure:
sql
Copy code
CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    password VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);
1.3 Groups Table
Purpose: Stores groups for users.
Structure:
sql
Copy code
CREATE TABLE Groups (
    group_id INT PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    description CLOB
);
1.4 Systems Table
Purpose: Stores systems relevant to the application.
Structure:
sql
Copy code
CREATE TABLE Systems (
    system_id INT PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    description CLOB
);
1.5 Properties Table
Purpose: Stores properties related to systems.
Structure:
sql
Copy code
CREATE TABLE Properties (
    property_id INT PRIMARY KEY,
    system_id INT,
    name VARCHAR2(100),
    value CLOB,
    CONSTRAINT fk_system_id FOREIGN KEY (system_id) REFERENCES Systems(system_id)
);
1.6 Events Table
Purpose: Stores events generated by systems.
Structure:
sql
Copy code
CREATE TABLE Events (
    event_id INT PRIMARY KEY,
    system_id INT,
    type VARCHAR2(50),
    message CLOB,
    timestamp TIMESTAMP,
    CONSTRAINT fk_system_id FOREIGN KEY (system_id) REFERENCES Systems(system_id)
);
1.7 Actions Table
Purpose: Stores actions associated with systems.
Structure:
sql
Copy code
CREATE TABLE Actions (
    action_id INT PRIMARY KEY,
    system_id INT,
    type VARCHAR2(50),
    message CLOB,
    timestamp TIMESTAMP,
    CONSTRAINT fk_actions_system_id FOREIGN KEY (system_id) REFERENCES Systems(system_id)
);
1.8 UserRoles Table
Purpose: Manages many-to-many relationships between users and roles.
Structure:
sql
Copy code
CREATE TABLE UserRoles (
    user_id INT,
    role_id INT,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);
2. Data Insertion
2.1 Inserting Roles
sql
Copy code
INSERT INTO Roles (role_id, name, description) VALUES
(1, 'Admin', 'Administrator role with full access'),
(2, 'User', 'Regular user with limited access'),
(3, 'Guest', 'Guest user with read-only access'),
(4, 'Moderator', 'Role with permission to moderate content'),
(5, 'SuperUser', 'Superuser role with extended privileges');
2.2 Inserting Users
sql
Copy code
INSERT INTO Users (user_id, username, password, email) VALUES
(1, 'john_doe', 'hashed_password_1', 'john@example.com'),
(2, 'jane_smith', 'hashed_password_2', 'jane@example.com'),
(3, 'alice_jones', 'hashed_password_3', 'alice@example.com'),
(4, 'bob_brown', 'hashed_password_4', 'bob@example.com');
2.3 Inserting Groups
sql
Copy code
INSERT INTO Groups (group_id, name, description) VALUES
(1, 'Book Club', 'A group for people who love reading and discussing books.'),
(2, 'Hiking Enthusiasts', 'A community for those who enjoy outdoor adventures and hiking.'),
(3, 'Photography Lovers', 'A group for amateur and professional photographers to share their work and tips.'),
(4, 'Tech Innovators', 'A network for individuals interested in technology and innovation.'),
(5, 'Cooking Masters', 'A group dedicated to cooking and sharing recipes from around the world.');
2.4 Inserting Systems
sql
Copy code
INSERT INTO Systems (system_id, name, description) VALUES
(1, 'Inventory Management', 'A system for tracking inventory levels, orders, sales, and deliveries.'),
(2, 'Customer Relationship Management', 'A system for managing a company\'s interactions with current and potential customers.'),
(3, 'Project Management Tool', 'A system designed to help manage project planning, resources, and schedules.'),
(4, 'Financial Accounting System', 'A system that helps manage financial transactions and reporting.'),
(5, 'Human Resource Management', 'A system for managing employee data, recruitment, and payroll processes.');
2.5 Inserting UserRoles
sql
Copy code
INSERT INTO UserRoles (user_id, role_id) VALUES
(1, 1), -- User ID 1 assigned to Role ID 1 (Admin)
(1, 2), -- User ID 1 also assigned to Role ID 2 (User)
(3, 3); -- User ID 3 assigned to Role ID 3 (Guest)
3. Data Management
3.1 Updating Roles
sql
Copy code
UPDATE Roles
SET description = 'Administrator role with full access and management capabilities'
WHERE role_id = 1;
3.2 Deleting a Role
sql
Copy code
DELETE FROM Roles
WHERE role_id = 4; -- Deletes Moderator role
4. Data Retrieval
4.1 Selecting Users with Roles
sql
Copy code
SELECT
    u.user_id,
    u.username,
    u.email,
    r.name AS role_name,
    r.description AS role_description
FROM
    Users u
LEFT JOIN
    UserRoles ur ON u.user_id = ur.user_id
LEFT JOIN
    Roles r ON ur.role_id = r.role_id;
4.2 Counting Users by Role
sql
Copy code
SELECT
    r.name AS role_name,
    COUNT(u.user_id) AS user_count
FROM
    Roles r
LEFT JOIN
    UserRoles ur ON r.role_id = ur.role_id
LEFT JOIN
    Users u ON ur.user_id = u.user_id
GROUP BY
    r.name;

Conclusion
This documentation serves as a guide for managing the SQL database schema, ensuring proper operations for data manipulation, and providing clear guidelines for potential issues and resolutions. For any further modifications or enhancements, this structure can be expanded upon as needed.